# DP: Fix PR gold/18989. Implement --push-state/--pop-state.

Index: b/gold/options.cc
===================================================================
--- a/gold/options.cc
+++ b/gold/options.cc
@@ -687,6 +687,20 @@ General_options::string_to_object_format
     }
 }
 
+const char*
+General_options::object_format_to_string(General_options::Object_format fmt)
+{
+  switch (fmt)
+    {
+    case General_options::OBJECT_FORMAT_ELF:
+      return "elf";
+    case General_options::OBJECT_FORMAT_BINARY:
+      return "binary";
+    default:
+      gold_unreachable();
+    }
+}
+
 void
 General_options::parse_fix_v4bx(const char*, const char*,
 				Command_line*)
@@ -713,6 +727,39 @@ General_options::parse_EL(const char*, c
   this->endianness_ = ENDIANNESS_LITTLE;
 }
 
+void
+General_options::copy_from_posdep_options(
+    const Position_dependent_options& posdep)
+{
+  this->set_as_needed(posdep.as_needed());
+  this->set_Bdynamic(posdep.Bdynamic());
+  this->set_format(
+      General_options::object_format_to_string(posdep.format_enum()));
+  this->set_whole_archive(posdep.whole_archive());
+  this->set_incremental_disposition(posdep.incremental_disposition());
+}
+
+void
+General_options::parse_push_state(const char*, const char*, Command_line*)
+{
+  Position_dependent_options* posdep = new Position_dependent_options(*this);
+  this->options_stack_.push_back(posdep);
+}
+
+void
+General_options::parse_pop_state(const char*, const char*, Command_line*)
+{
+  if (this->options_stack_.empty())
+    {
+      gold::gold_error(_("unbalanced --push-state/--pop-state"));
+      return;
+    }
+  Position_dependent_options* posdep = this->options_stack_.back();
+  this->options_stack_.pop_back();
+  this->copy_from_posdep_options(*posdep);
+  delete posdep;
+}
+
 } // End namespace gold.
 
 namespace
Index: b/gold/options.h
===================================================================
--- a/gold/options.h
+++ b/gold/options.h
@@ -1028,6 +1028,11 @@ class General_options
 		N_("Print symbols defined and used for each input"),
 		N_("FILENAME"));
 
+  DEFINE_special(push_state, options::TWO_DASHES, '\0',
+		 N_("Save the state of flags related to input files"), NULL);
+  DEFINE_special(pop_state, options::TWO_DASHES, '\0',
+		 N_("Restore the state of flags related to input files"), NULL);
+
   DEFINE_bool(Qy, options::EXACTLY_ONE_DASH, '\0', false,
 	      N_("Ignored for SVR4 compatibility"), NULL);
 
@@ -1403,6 +1408,10 @@ class General_options
   static Object_format
   string_to_object_format(const char* arg);
 
+  // Convert an Object_format to string.
+  static const char*
+  object_format_to_string(Object_format);
+
   // Note: these functions are not very fast.
   Object_format format_enum() const;
   Object_format oformat_enum() const;
@@ -1496,6 +1505,10 @@ class General_options
   incremental_disposition() const
   { return this->incremental_disposition_; }
 
+  void
+  set_incremental_disposition(Incremental_disposition disp)
+  { this->incremental_disposition_ = disp; }
+
   // The disposition to use for startup files (those that precede the
   // first --incremental-changed, etc. option).
   Incremental_disposition
@@ -1627,6 +1640,9 @@ class General_options
   void
   add_plugin_option(const char* opt);
 
+  void
+  copy_from_posdep_options(const Position_dependent_options&);
+
   // Whether we printed version information.
   bool printed_version_;
   // Whether to mark the stack as executable.
@@ -1670,6 +1686,8 @@ class General_options
   Endianness endianness_;
   // What local symbols to discard.
   Discard_locals discard_locals_;
+  // Stack of saved options for --push-state/--pop-state.
+  std::vector<Position_dependent_options*> options_stack_;
 };
 
 // The position-dependent options.  We use this to store the state of
@@ -1700,7 +1718,8 @@ class Position_dependent_options
 			     = Position_dependent_options::default_options_)
   { copy_from_options(options); }
 
-  void copy_from_options(const General_options& options)
+  void
+  copy_from_options(const General_options& options)
   {
     this->set_as_needed(options.as_needed());
     this->set_Bdynamic(options.Bdynamic());
